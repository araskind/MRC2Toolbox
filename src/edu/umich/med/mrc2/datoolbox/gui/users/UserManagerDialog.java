/*******************************************************************************
 *
 * (C) Copyright 2018-2020 MRC2 (http://mrc2.umich.edu).
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Contributors:
 * Alexander Raskind (araskind@med.umich.edu)
 *
 ******************************************************************************/

package edu.umich.med.mrc2.datoolbox.gui.users;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.ArrayList;
import java.util.Collection;

import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JDialog;
import javax.swing.JOptionPane;
import javax.swing.JRootPane;
import javax.swing.JScrollPane;
import javax.swing.KeyStroke;
import javax.swing.SwingUtilities;
import javax.swing.WindowConstants;

import org.apache.commons.lang3.StringUtils;

import edu.umich.med.mrc2.datoolbox.data.enums.UserAffiliation;
import edu.umich.med.mrc2.datoolbox.data.lims.LIMSUser;
import edu.umich.med.mrc2.datoolbox.database.idt.IDTDataCash;
import edu.umich.med.mrc2.datoolbox.database.idt.UserUtils;
import edu.umich.med.mrc2.datoolbox.gui.idtlims.user.UserTable;
import edu.umich.med.mrc2.datoolbox.gui.main.MainActionCommands;
import edu.umich.med.mrc2.datoolbox.gui.utils.GuiUtils;
import edu.umich.med.mrc2.datoolbox.gui.utils.MessageDialog;
import edu.umich.med.mrc2.datoolbox.main.MRC2ToolBoxCore;
import edu.umich.med.mrc2.datoolbox.utils.CommonFormFieldVerifier;
import edu.umich.med.mrc2.datoolbox.utils.CrunchifyRandomPasswordGenerator;

public class UserManagerDialog extends JDialog implements ActionListener {

	/**
	 *
	 */
	private static final long serialVersionUID = 5685218262277207511L;
	private UserManagerToolbar toolbar;
	private UserTable userTable;
	private UserEditorDialog userEditorDialog;
	private String newUserAutogeneratedPassword;

	private static final Icon acqMethodIcon = GuiUtils.getIcon("superUser", 32);

	public UserManagerDialog() {

		super(MRC2ToolBoxCore.getMainWindow(), "Manage system users");
		setIconImage(((ImageIcon) acqMethodIcon).getImage());
		setPreferredSize(new Dimension(480, 640));

		setModalityType(ModalityType.APPLICATION_MODAL);
		setSize(new Dimension(640, 480));
		setResizable(true);
		setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);

		toolbar  = new UserManagerToolbar(this);
		getContentPane().add(toolbar, BorderLayout.NORTH);

		JScrollPane scrollPane = new JScrollPane();
		getContentPane().add(scrollPane, BorderLayout.CENTER);
		userTable = new UserTable();
		IDTDataCash.refreshUserList();
		try {
			userTable.setTableModelFromUserList(IDTDataCash.getUsers(UserAffiliation.STAFF));
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		scrollPane.setViewportView(userTable);

		KeyStroke stroke = KeyStroke.getKeyStroke(KeyEvent.VK_ESCAPE, 0);
		ActionListener al = new ActionListener() {
			public void actionPerformed(ActionEvent ae) {
				dispose();
			}
		};
		JRootPane rootPane = SwingUtilities.getRootPane(toolbar);
		rootPane.registerKeyboardAction(al, stroke, JComponent.WHEN_IN_FOCUSED_WINDOW);
		pack();
	}

	@Override
	public void actionPerformed(ActionEvent event) {

		String command = event.getActionCommand();
		
		if(command.equals(MainActionCommands.ADD_USER_DIALOG_COMMAND.getName()))
			showAddUserDialog();

		if(command.equals(MainActionCommands.EDIT_USER_DIALOG_COMMAND.getName()))
			showEditUserDialog();

		if(command.equals(MainActionCommands.ADD_USER_COMMAND.getName()))
			addUser();

		if(command.equals(MainActionCommands.EDIT_USER_COMMAND.getName()))
			editUser();

		if(command.equals(MainActionCommands.DELETE_USER_COMMAND.getName()))
			deleteSelectedUser();
	}

	private void showAddUserDialog() {

		userEditorDialog = new UserEditorDialog(null, this);
		userEditorDialog.setLocationRelativeTo(this);
		userEditorDialog.setVisible(true);
	}

	private void addUser() {

		Collection<String>errors = validateUserData(true);
		if(!errors.isEmpty()) {
			MessageDialog.showErrorMsg(StringUtils.join(errors, "\n"), userEditorDialog);
			return;
		}
		CrunchifyRandomPasswordGenerator pwdGen = new CrunchifyRandomPasswordGenerator();
		newUserAutogeneratedPassword = pwdGen.getRandomPassword(10);
		LIMSUser newUser = new LIMSUser(
				userEditorDialog.getLastName(),
				userEditorDialog.getFirstName(),
				userEditorDialog.getUserName(),
				userEditorDialog.getUserAffiliation(),
				userEditorDialog.getOrganization(),
				userEditorDialog.getEmail(),
				CommonFormFieldVerifier.formatPhoneNumber(userEditorDialog.getPhone()),	
				userEditorDialog.isSuperUser(),
				userEditorDialog.isActive());
		
		String limsUserId = null;
		try {
			limsUserId = UserUtils.addNewUser(newUser, newUserAutogeneratedPassword);
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if(limsUserId == null) {
			MessageDialog.showErrorMsg("Failed to create new user.", userEditorDialog);
			return;
		}
		userEditorDialog.dispose();
		
		newUser.setId(limsUserId);
		
		//	Show dialog to copy new password
		CopyPasswordDialog cpp = new CopyPasswordDialog(newUserAutogeneratedPassword);
		cpp.setLocationRelativeTo(this);
		cpp.setVisible(true);
		
		IDTDataCash.refreshUserList();
		try {			
			userTable.setTableModelFromUserList(IDTDataCash.getUsers(UserAffiliation.STAFF));
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		userTable.selectUser(newUser);	
		
	}

	private void showEditUserDialog() {

		LIMSUser user = userTable.getSelectedUser();
		if(user == null)
			return;
		
		userEditorDialog = new UserEditorDialog(user, this);
		userEditorDialog.setLocationRelativeTo(this);
		userEditorDialog.setVisible(true);
	}
	
	private void editUser() {
		
		Collection<String>errors = validateUserData(false);
		if(!errors.isEmpty()) {
			MessageDialog.showErrorMsg(StringUtils.join(errors, "\n"), userEditorDialog);
			return;
		}
		LIMSUser user = userEditorDialog.getUser();
		user.setFirstName(userEditorDialog.getFirstName());
		user.setLastName(userEditorDialog.getLastName());
		user.setUsername(userEditorDialog.getUserName());
		user.setOrganizationId(userEditorDialog.getOrganization().getId());
		user.setAffiliation(userEditorDialog.getUserAffiliation().name());
		user.setEmail(userEditorDialog.getEmail());
		user.setPhone(CommonFormFieldVerifier.formatPhoneNumber(userEditorDialog.getPhone()));
		user.setSuperUser(userEditorDialog.isSuperUser());
		user.setActive(userEditorDialog.isActive());
		
		try {
			UserUtils.editUser(user);
		} catch (Exception e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}		
		IDTDataCash.refreshUserList();
		try {			
			userTable.setTableModelFromUserList(IDTDataCash.getUsers(UserAffiliation.STAFF));
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		userTable.selectUser(user);	
		userEditorDialog.dispose();
	}

	private void deleteSelectedUser() {

		LIMSUser user = userTable.getSelectedUser();
		if(user == null)
			return;
		
		String yesNoQuestion = "<HTML>Do you want to delete user <B>" + user.getFullName() + "</B>?\n"
				+ "All the data associated with this user will be deleted from database!";
		int res = MessageDialog.showChoiceWithWarningMsg(yesNoQuestion , this);
		if(res == JOptionPane.YES_OPTION) {
			try {
				UserUtils.deleteUser(user);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			IDTDataCash.refreshUserList();
			try {			
				userTable.setTableModelFromUserList(IDTDataCash.getUsers(UserAffiliation.STAFF));
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}
	
	private Collection<String> validateUserData(boolean newUser) {
		
		Collection<String>errors = new ArrayList<String>();
		if(userEditorDialog.getFirstName().isEmpty()) {
			errors.add("First name not specified.");
			return errors;
		}
		if(userEditorDialog.getLastName().isEmpty()) {
			errors.add("Last name not specified.");
			return errors;
		}
		if(userEditorDialog.getUserName().isEmpty()) {
			errors.add("User name not specified.");
			return errors;
		}
		//	Check if user name available
		LIMSUser user = null;
		try {
			user = UserUtils.getUserByUserId(userEditorDialog.getUserName());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if(user != null) {
			if(newUser) {
				errors.add("User name \"" + userEditorDialog.getUserName() + "\" not available.");
				return errors;
			}
			else {
				if(!userEditorDialog.getUser().getId().equals(user.getId())) {
					errors.add("User name \"" + userEditorDialog.getUserName() + "\" not available.");
					return errors;
				}
			}
		}		
		String email = userEditorDialog.getEmail();
		if(!CommonFormFieldVerifier.emailIsValid(email)) {
			errors.add("E-nmail is invalid");
			return errors;
		}
		//	Check if user name available
		user = null;
		try {
			user = UserUtils.getUserByEmail(userEditorDialog.getEmail());
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		if(user != null) {
			if(newUser) {
				errors.add("E-mail \"" + userEditorDialog.getEmail() + "\" already in use.");
				return errors;
			}
			else {
				if(!userEditorDialog.getUser().getId().equals(user.getId())) {
					errors.add("E-mail \"" + userEditorDialog.getEmail() + "\" already in use.");
					return errors;
				}
			}
		}
		String phoneNumber = userEditorDialog.getPhone();
		if(!CommonFormFieldVerifier.isPhoneValid(phoneNumber)) {
			errors.add("Phone number is invalid (has to contain 10 digits)");
			return errors;
		}	
		if(userEditorDialog.getUserAffiliation() == null) {
			errors.add("User affiliation not specified.");
			return errors;
		}
		if(userEditorDialog.getOrganization() == null) {
			errors.add("Organization not specified.");
			return errors;
		}
		return errors;
	}
}
























